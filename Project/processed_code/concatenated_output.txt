// File: .java
STRINGBUILDER SB = NEW STRINGBUILDER(STR);
RETURN TRUE;
DOUBLE X = 20;
RETURN FALSE;
RETURN FALSE;
DOUBLE I = 2;
DOUBLE I = 1;
CLASS SAMPLEDEMO {
	// METHOD TO ADD TWO NUMBERS
	/**
	* METHOD: ADD
	* DESCRIPTION: AUTO-GENERATED METHOD DOCUMENTATION
	* PARAMETERS: AUTO-DETECTED
	* RETURNS: AUTO-DETECTED
	*/**
	PUBLIC STATIC DOUBLE ADD(DOUBLE A, DOUBLE B) {
		RETURN A + B;
	}
	/**
	* METHOD: ADD
	* DESCRIPTION: AUTO-GENERATED METHOD DOCUMENTATION
	* PARAMETERS: AUTO-DETECTED
	* RETURNS: AUTO-DETECTED
	*/**
	PUBLIC STATIC DOUBLE ADD(DOUBLE A, DOUBLE B) {
		RETURN A + B;
	}
	/**
	* METHOD: ISPRIME
	* DESCRIPTION: AUTO-GENERATED METHOD DOCUMENTATION
	* PARAMETERS: AUTO-DETECTED
	* RETURNS: AUTO-DETECTED
	*/**
	PUBLIC STATIC BOOLEAN ISPRIME(DOUBLE N) {
		IF (N <= 1) RETURN FALSE;
		FOR (DOUBLE I = 2; I <= MATH.SQRT(N); I++) {
			IF (N % I == 0) RETURN FALSE;
		}
		/**
		* METHOD: REVERSE
		* DESCRIPTION: AUTO-GENERATED METHOD DOCUMENTATION
		* PARAMETERS: AUTO-DETECTED
		* RETURNS: AUTO-DETECTED
		*/**
		PUBLIC STATIC STRING REVERSE(STRING STR) {
			STRINGBUILDER SB = NEW STRINGBUILDER(STR);
			RETURN SB.REVERSE().TOSTRING();
		}
		/**
		* METHOD: MAIN
		* DESCRIPTION: AUTO-GENERATED METHOD DOCUMENTATION
		* PARAMETERS: AUTO-DETECTED
		* RETURNS: AUTO-DETECTED
		*/**
		PUBLIC STATIC VOID MAIN(STRING[] ARGS) {
			SYSTEM.OUT.PRDOUBLELN("SUM OF 5 AND 10: " + ADD(5, 10));
			SYSTEM.OUT.PRDOUBLELN("IS 17 PRIME? " + ISPRIME(17));
			SYSTEM.OUT.PRDOUBLELN("REVERSE OF 'HACKATHON' IS: " + REVERSE("HACKATHON"));
			// LOOP/**
			* METHOD: FOR
			* DESCRIPTION: AUTO-GENERATED METHOD DOCUMENTATION
			* PARAMETERS: AUTO-DETECTED
			* RETURNS: AUTO-DETECTED
			*/**
			EXAMPLE
			FOR (DOUBLE I = 1; I <= 5; I++) {
				SYSTEM.OUT.PRDOUBLELN("NUMBER: " + I);
			}

